@usecase
Os testes podem ser classificados de 2 formas: <b>estáticos</b> ou <b>dinâmicos</b>.<br/><br/>Os <b>testes estáticos</b> permitem determinar se a estrutura de uma classe está bem construída. Por exemplo, é possível criar um teste para verificar se um método é privado ou público. Para esse efeito, é necessário utilizar as <a target="_blank" href="http://www.oracle.com/technetwork/articles/java/javareflection-1536171.html">bibliotecas de reflexão</a> do Java.<br/><br/>Os <b>testes dinâmicos</b> avaliam o comportamento da aplicação (Runtime). Por exemplo, um teste pode verificar se um método tem o comportamento expectável quando recebe um valor <dfn>null</dfn> num dos parâmetros.<br/><h1>Exercício</h1>Considere a <a href="files/TestSingleton/resources/SingletonPattern.jar">implementação do padrão Singleton</a>.<br/><br/><input type="checkbox"/>Crie um teste para verificar se o método <dfn>setPath()</dfn> regista o caminho do ficheiro corretamente.<br/><input type="checkbox"/>Crie um teste para verificar se o método <dfn>setConnectionString()</dfn> regista a string de conexão corretamente.<br/><input type="checkbox"/>Crie um teste para verificar se o método <dfn>setPath()</dfn> tem o comportamento expectável quanto recebe um valor null.<br/><input type="checkbox"/>Crie um teste para verificar se o método <dfn>setConnectionString()</dfn> tem o comportamento expectável quanto recebe um valor null.<br/><input type="checkbox"/>Crie um teste para verificar se o construtor da classe <dfn>Singleton()</dfn> é privado. Pode utilizar a expressão <dfn>fail(...)</dfn> para fazer o teste falhar, caso o construtor seja público.
@methods

@deadline
2018-03-22 20:10
@group
esII20172018
@exectype
AspectJProject