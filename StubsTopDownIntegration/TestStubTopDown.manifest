@usecase
<p>Os testes de integra&ccedil;&atilde;o s&atilde;o utilizados em situa&ccedil;&otilde;es onde &eacute; necess&aacute;rio integrar os v&aacute;rios m&oacute;dulos constituintes de um sistema. Na maior parte dos cen&aacute;rios n&atilde;o existe uma integra&ccedil;&atilde;o big bang, onde os m&oacute;dulos s&atilde;o desenvolvidos ao mesmo tempo, sendo depois integrados de uma &uacute;nica vez. Em cen&aacute;rios reais, os m&oacute;dulos s&atilde;o&nbsp;<strong>desenvolvidos</strong>&nbsp;e&nbsp;<strong>testados</strong>&nbsp;<strong>incrementalmente</strong>&nbsp;utilizando abordagens&nbsp;<a href="https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design"><strong>top-down</strong></a>&nbsp;e&nbsp;<strong>bottom-up</strong>.</p> <p>Na abordagem top-down, os m&oacute;dulos do topo da hierarquia s&atilde;o desenvolvidos primeiro, sendo testados com&nbsp;<a href="https://en.wikipedia.org/wiki/Test_stub" target="_blank" rel="noopener"><strong>stubs</strong></a>. Os&nbsp;stubs&nbsp;substituem a implementa&ccedil;&atilde;o das depend&ecirc;ncias pelo&nbsp;c&oacute;digo&nbsp;que&nbsp;emula&nbsp;o&nbsp;comportamento b&aacute;sico desses&nbsp;m&oacute;dulos. Os stubs, tamb&eacute;m conhecidos como&nbsp;<strong>mock objects,</strong>&nbsp;s&atilde;o&nbsp;objetos&nbsp;que replicam o comportamento dos objetos&nbsp;originais&nbsp;a implementar&nbsp;no futuro.</p> <h1>Exerc&iacute;cio</h1> <p><input type="checkbox" />Considere a implementa&ccedil;&atilde;o de um servi&ccedil;o de pesquisa de livros com v&aacute;rios m&oacute;dulos, implementados utilizando uma abordagem top-down.</p> <p><input type="checkbox" />Importe as classes do&nbsp;<a href="files/TestStubTopDown/resources/StubTopDown.jar" target="_blank" rel="noopener">ficheiro JAR</a>&nbsp;e analise a implementa&ccedil;&atilde;o.</p> <p><input type="checkbox" />Crie o TestCase&nbsp;<strong>TestStubTopDown</strong>.</p> <p><input type="checkbox" />Crie um teste para o m&eacute;todo&nbsp;<strong>getTotalBooks(..)</strong>. Comece por criar uma inst&acirc;ncia do servi&ccedil;o de autores e do servi&ccedil;o de livros. Para esse efeito, &eacute; importante relacionar ambos os servi&ccedil;os (utilizando o m&eacute;todo&nbsp;<strong>setBookService</strong>) e definir o objeto que vai validar a filtragem na pesquisa (m&eacute;todo&nbsp;<strong>setBookValidatorService</strong>).</p> <p><input type="checkbox" />&Eacute; expect&aacute;vel que o teste n&atilde;o passe, uma vez&nbsp; que&nbsp;falta criar o c&oacute;digo DAO que permite aceder &agrave; base de dados. Este componente ainda n&atilde;o est&aacute; criado, pelo que &eacute; necess&aacute;rio fazer o teste sem a exist&ecirc;ncia do mesmo, recorrendo a um stub. Implemente a classe&nbsp;<strong>MockBookServiceImpl</strong>&nbsp;de forma a permitir fazer o teste do m&eacute;todo&nbsp;<strong>getTotalBooks(..)</strong>. Considere&nbsp;para esse&nbsp;efeito&nbsp;que&nbsp;existem&nbsp;3 registos&nbsp;na&nbsp;base de dados.</p> <p><input type="checkbox" />Crie um novo teste para o m&eacute;todo&nbsp;<strong>getTotalBooks(..)</strong>&nbsp;utilizando o stub criado anteriormente.</p>
@methods
<b>TestStubTopDown</b> - classe de testes.
@deadline
2018-04-19 20:10
@group
esII20172018
@exectype
AspectJProject