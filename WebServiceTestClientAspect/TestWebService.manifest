@usecase
<p>A arquitetura de serviços web típicos pode complicar a realização de testes, devido à complexidade criada pelas várias camadas de software envolvidas nos serviços. Entre as várias camadas, encontra-se a <strong>camada de apresentação</strong> (ex: páginas web e aplicações mobile), a <strong>camada da lógica de negócio</strong> (ex: aplicação Java, Node.JS) e a <strong>camada de dados</strong> (ex: base de dados relacional ou NoSQL).</p><p><img src="files/TestWebService/resources/webarchitecture.png" width="600" /></p><p>Para além da camada aplicacional, é necessário considerar os testes às infraestruturas subjacentes, tais como, middleware, sistemas operativo, e componentes de rede (ex: firewalls, DNS).&nbsp;</p><p>O componente principal que se encontra a suportar um serviço não é mais do que uma aplicação normal que recebe pedidos HTTP e dá resposta a esses pedidos. No entanto, uma vez que o serviço se encontra muitas vezes exposto na Internet, tem de garantir um conjunto de requisitos não funcionais, tais como, a segurança e a performance.&nbsp;</p><p>Esta tarefa aborda apenas os testes aos <strong>requisitos funcionais de um serviço web</strong>. Estes testes são feitos recorrendo às técnicas estudadas anteriormente para os Testes de Unidade. Na maior parte das situações, só é possível efetuar testes Black-box, uma vez que o código do webservice não se encontra disponível.</p><h1>Exercício</h1><p>Considere o webservice com um método disponível a partir <strong>URL REST http://193.137.7.39/client/{idclient}</strong>. Este serviço devolve uma estrutura JSON com os elementos <strong>id</strong>, <strong>name</strong>, <strong>address</strong>, <strong>ssn</strong> e <strong>job</strong>. Neste momento só existem 3 clientes, pelo que o <strong>{idclient}</strong> pode assumir valores entre <strong>1</strong> e <strong>3</strong>. Os elementos <strong>ssd</strong> e <strong>job</strong> são <strong>facultativos</strong> mas, quando inseridos, <strong>não podem estar vazios</strong> na estrutura. Pretende-se nesta tarefa fazer os testes necessários para validar a funcionalidade deste webservice. Embora a abordagem seja Black-box, o <a href="files/TestWebService/resources/WebServiceServer.jar" target="_blank" rel="noopener">código do serviço pode ser consultado</a>.</p><p><input type="checkbox" />Crie um projeto <strong>Maven</strong> em Eclipse. Este tipo de projeto vai permitir fazer a gestão automatizada das dependências em Java. Ao submeter posteriormente o projeto para validação, tenha o cuidado de selecionar apenas a <strong>pasta com os ficheiros relacionados com os testes</strong>, ignorando as restantes pastas.</p><p><input type="checkbox" />Insira no <strong>fim do ficheiro pom.xml</strong> (antes do fecho do elemento <strong>project</strong>) o seguinte código:</p><pre><code>&lt;dependencies&gt;<br />&nbsp; &lt;dependency&gt;<br />&nbsp; &nbsp; &nbsp; &lt;groupId&gt;org.json&lt;/groupId&gt;<br />&nbsp; &nbsp; &nbsp; &lt;artifactId&gt;json&lt;/artifactId&gt;<br />&nbsp; &nbsp; &nbsp; &lt;version&gt;20160807&lt;/version&gt;<br />&nbsp;&lt;/dependency&gt;<br />&lt;/dependencies&gt;</code></pre><p>O código anterior vai permitir descarregar a biblioteca de manipulação de ficheiros JSON.</p><p><input type="checkbox" />Crie um teste para a considerar a invocação do <strong>cliente</strong> com <strong>id=1</strong>. Para esse efeito, utilize como referência o exemplo do <strong>ponto 3</strong> <a href="http://www.baeldung.com/java-http-request" target="_blank" rel="noopener">deste exemplo</a>. Prepare o código para trocar facilmente o endereço do webservice, utilizando uma variável para esse efeito. Ao submeter o projeto na plataforma, deve <strong>trocar o endereço do servidor</strong> para <strong>localhost</strong> ou <strong>127.0.0.1</strong>.</p><p><input type="checkbox" />O serviço requer autenticação. O código do <strong>token</strong> para validação do request é <strong>123456789</strong>.O token tem de ser passado através de um atributo do cabeçalho HTTP, tal como aparece no exemplo seguinte.</p><pre><code>con.setRequestProperty("Authorization", "Bearer 123456789");</code></pre><p>O processo de autenticação anterior terá de ser validado posteriomente.</p><p><input type="checkbox" />&nbsp;O cliente do webservice não vai enviar uma estrutura com dados, pelo que apenas tem de dizer ao servidor qual é o tipo de conteúdo que pode receber, tal como no exemplo seguinte.</p><pre><code>con.setRequestProperty("Accept", "application/json");</code></pre><p><input type="checkbox" />O servidor terá que enviar os dados associados a um tipo de conteúdo especificado no elemento do cabeçalho&nbsp;<strong>Content-Type</strong>. Este é um pressuposto que terá de ser validado.</p><p><input type="checkbox" />Uma invocação HTTP tem um <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank" rel="noopener">código de resposta</a>. Por exemplo, um pedido executado com sucesso no serviço tem normalmente o código de resposta <strong>200</strong>. O código de resposta pode ser lido como exemplificado no&nbsp;<strong>ponto 9</strong>&nbsp;<a href="http://www.baeldung.com/java-http-request" target="_blank" rel="noopener">do exemplo referido anteriormente</a>. Este código tem de ser validado.</p><p><input type="checkbox" />Altere nos testes o <strong>código do cliente</strong> para <strong>id=2</strong>. Os testes continuam a passar? Se não passarem,&nbsp;<strong>altere os testes</strong> de forma estarem alinhados com os constrangimentos dos elementos da estrutura JSON definidos anteriormente.</p><p><input type="checkbox" />O conteúdo da estrutura JSON pode conter erros. Se estiver mal formada ao ser carregada por um objeto JSON, é atirada uma exceção, o que permite validar a estrutura. Crie um teste para verificar se o&nbsp;<strong>cliente</strong>&nbsp;com o&nbsp;<strong>id=3</strong> tem erros de estrutura. Se detetar erros, não submeta este teste na plataforma, uma vez que o código do webservice não está disponível para edição.</p>
@methods
<dfn>TestWebService</dfn> - nome da classe de testes.
@deadline
2018-04-26 20:15
@group
esII20172018
@exectype
AspectJProject